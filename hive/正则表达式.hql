-- 正则表达式
regexp_extract
regexp_replace
rlike
'b123a34b' rlike '[123]+a(12|34)'
REGEXP_EXTRACT('HasSoonGroup:true','(Group:)')
REGEXP_EXTRACT('HasSoonGroup:true','(Group:)',1)
REGEXP_EXTRACT('HasSoonGroup:true','(Group:[turefals]+)',1)



line='(u_游玩天数:(4_4日,4_4日),departureDate:([2015-08-02,2015-08-04]),price:(500,1000))'
print

regexp_replace(str_to_map(value,'&','=')['filter'],'^\\(|\\)$','')


1，替换中括号为小括号；
select regexp_replace('{"DD_出发日期":["[a,b,c]_11月","[c,d]_2016年01月"],"a":"b"}','\\[([^\\[\\]]+)\\]','($1)') as a;

2，替换中括号中的，为&
-- (?<=pattern) 非获取匹配，反向肯定预查不能为变长
select regexp_replace('{"DD_出发日期":["[a,b]_11月","[c,d]_2016年01月"],"a":"b"}',"(?<=\\[[^\\[\\]]{1,100}),(?=[^\\[\\]]+?\\])","&") as a;
select regexp_replace('{"DD_出发日期":["[a,b,c]_11月","[c,d]_2016年01月"],"a":"b"}',"(\\[[^\\[\\]]+),(?=[^\\[\\]]+?\\])","$1&") as a;
select regexp_replace('{"DD_出发日期":["[a,b,c]_11月","[c,d]_2016年01月"],"a":"b"}',",(?=[^\\[\\]]+?\\])","&") as a;


{"DD_出发日期":["[a&b]_11月","[c&d]_2016年01月"],"a":"b"}
{"DD_出发日期":["[a&b]_11月","[c&d]_2016年01月"],"a":"b"}


3, 替换[,]为[&],替换内层[]为<>，替换[,]为[&],替换<>为[]
select regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace('{"DD_出发日期":["[a,b]_11月","[c,d]_2016年01月"],"a":"b"}'
    ,"(?<=\\[[^\\[\\]]{1,100}),(?=[^\\[\\]]+?\\])","&")
    ,'\\[([^\\[\\]]+)\\]','<$1>')
    ,"(?<=\\[[^\\[\\]]{1,100}),(?=[^\\[\\]]+?\\])","&")
    ,"<","\\[")
    ,">","\\]") as a
;


!!!!注python引用组为\1,但是hive引用使用$1
select regexp_replace('(u_游玩天数:(4_4日,4_4日),departureDate:([2015-08-02,2015-08-04]),price:(500,1000))','[^\\(\\)$]') as a

select regexp_replace('(u_游玩天数:(4_4日,4_4日),departureDate:([2015-08-02,2015-08-04]),price:(500,1000))','^\\(|\\)$','') as a;

select regexp_replace('(u_游玩天数:(4_4日,4_4日),departureDate:([2015-08-02,2015-08-04]),price:(500,1000))',',([\w\x80-\xff]+):','&\1:') as a;

select regexp_replace('(u_游玩天数:(4_4日,4_4日),departureDate:([2015-08-02,2015-08-04]),price中:(500,1000))',',([\\w\\x80-\\xff]+):','&\\1:') as a;

select regexp_replace('(u_游玩天数:(4_4日,4_4日),departureDate:([2015-08-02,2015-08-04]),price中:(500,1000))',',(\\w+):','&\$1:') as a;

select regexp_replace('(u_游玩天数:(4_4日,4_4日),departureDate:([2015-08-02,2015-08-04]),price中:(500,1000))',',([\\w\\x80-\\xff]+):','&\$1:') as a;

select regexp_replace('(u_游玩天数:(4_4日,4_4日),departureDate:([2015-08-02,2015-08-04]),price中:(500,1000))',',([\\w\\u4e00-\\u9fa5]+):','&\$1:') as a;


select regexp_replace(value,',([\\w\\u4e00-\\u9fa5]+):','&\$1:') as a;


regexp_extract(value,"\\\"TAG_服务标签\\\"\\:\\[([^\\]]+)\\]",1) as tagfilter

-------------------------------------------

hive 匹配中文 rlike '^[\\u4e00-\\u9fa5]+$';


替换中括号中的逗号: 注意{1,100}代替+
regexp_replace(filter,"(?<=\\[[^\\[\\]]{1,100}),(?=[^\\[\\]]+?\\])","&")

select regexp_replace('{"a_包含区域":["139_澳门","138_香港"],"d_途经景区":["39_澳门","38_香港"],"l_游玩线路":["173_香港+澳门"],"dc_出发城市":["2_上海"]}'
    ,"(?<=\\[[^\\[\\]]{1,100}),(?=[^\\[\\]]+?\\])","&");


select split('{a_包含区域:[139_澳门,138_香港,台湾],d_途经景区:[39_澳门,38_香港],dc_出发城市:[2_上海]}'
    ,'(?<!\\[[^\\[\\]]{1,50}),(?![^\\[\\]]+?\\])');



select a.*,b.f 
from (
select *
, regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(filter
    ,",(?=[^\\[\\]]+?\\])","&")
    ,'\\[([^\\[\\]]+)\\]','<$1>')
    ,",(?=[^\\[\\]]+?\\])","&")
    ,"<","\\[")
    ,">","\\]")as filter2
from tmp_dhua_list_tracelog_filter_group_1) a
LATERAL VIEW explode(split(regexp_replace(regexp_extract(filter2,'^\\{(.*)\\}$',1),'"',''),',')) b as f
;


select regexp_extract('[2016-07-01,2016-07-31]_7月','[^_]+_(?=2016年)?[0]?(.*)',1) as a
,regexp_extract('[2016-07-01,2016-07-31]_清明节','[^_]+_(?=2016年)?[0]?(.*)',1) as b
,regexp_extract('201606_2016年6月','[^_]+_(?:2016年)?[0]?(.*)',1) as c
;




匹配中文字符的正则表达式： [\u4e00-\u9fa5] 


匹配双字节字符(包括汉字在内)：[^\x00-\xff] 
评注：可以用来计算字符串的长度（一个双字节字符长度计2，ASCII字符计1） 

匹配空白行的正则表达式：\n\s*\r 
评注：可以用来删除空白行 

匹配HTML标记的正则表达式：<(\S*?)[^>]*>.*?</\1>|<.*? /> 
评注：网上流传的版本太糟糕，上面这个也仅仅能匹配部分，对于复杂的嵌套标记依旧无能为力 

匹配首尾空白字符的正则表达式：^\s*|\s*$ 
评注：可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式 

匹配Email地址的正则表达式：\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)* 
评注：表单验证时很实用 

匹配网址URL的正则表达式：[a-zA-z]+://[^\s]* 
评注：网上流传的版本功能很有限，上面这个基本可以满足需求 

匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$ 
评注：表单验证时很实用 

匹配国内电话号码：\d{3}-\d{8}|\d{4}-\d{7} 
评注：匹配形式如 0511-4405222 或 021-87888822 

匹配腾讯QQ号：[1-9][0-9]{4,} 
评注：腾讯QQ号从10000开始 

匹配中国邮政编码：[1-9]\d{5}(?!\d) 
评注：中国邮政编码为6位数字 

匹配身份证：\d{15}|\d{18} 
评注：中国的身份证为15位或18位 

匹配ip地址：\d+\.\d+\.\d+\.\d+ 
评注：提取ip地址时有用 

匹配特定数字： 
^[1-9]\d*$　 　 //匹配正整数 
^-[1-9]\d*$ 　 //匹配负整数 
^-?[1-9]\d*$　　 //匹配整数 
^[1-9]\d*|0$　 //匹配非负整数（正整数 + 0） 
^-[1-9]\d*|0$　　 //匹配非正整数（负整数 + 0） 
^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$　　 //匹配正浮点数 
^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$　 //匹配负浮点数 
^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$　 //匹配浮点数 
^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$　　 //匹配非负浮点数（正浮点数 + 0） 
^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$　　//匹配非正浮点数（负浮点数 + 0） 

匹配特定字符串： 
^[A-Za-z]+$　　//匹配由26个英文字母组成的字符串 
^[A-Z]+$　　//匹配由26个英文字母的大写组成的字符串 
^[a-z]+$　　//匹配由26个英文字母的小写组成的字符串 
^[A-Za-z0-9]+$　　//匹配由数字和26个英文字母组成的字符串 
^\w+$　　//匹配由数字、26个英文字母或者下划线组成的字符串 

匹配中文字符的正则表达式： [\u4e00-\u9fa5] 

匹配双字节字符(包括汉字在内)：[^\x00-\xff] 

匹配空行的正则表达式：\n[\s| ]*\r 

匹配HTML标记的正则表达式：/<(.*)>.*<\/\1>|<(.*) \/>/  

匹配首尾空格的正则表达式：(^\s*)|(\s*$) 

匹配Email地址的正则表达式：\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)* 

匹配网址URL的正则表达式：http://([\w-]+\.)+[\w-]+(/[\w- ./?%&=]*)? 


^\d+$　　//匹配非负整数（正整数 + 0）  
^[0-9]*[1-9][0-9]*$　　//匹配正整数  
^((-\d+)|(0+))$　　//匹配非正整数（负整数 + 0）  
^-[0-9]*[1-9][0-9]*$　　//匹配负整数  
^-?\d+$　　　　//匹配整数  
^\d+(\.\d+)?$　　//匹配非负浮点数（正浮点数 + 0）  
^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$　　//匹配正浮点数  
^((-\d+(\.\d+)?)|(0+(\.0+)?))$　　//匹配非正浮点数（负浮点数 + 0）  
^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$　　//匹配负浮点数  
^(-?\d+)(\.\d+)?$　　//匹配浮点数  
^[A-Za-z]+$　　//匹配由26个英文字母组成的字符串  
^[A-Z]+$　　//匹配由26个英文字母的大写组成的字符串  
^[a-z]+$　　//匹配由26个英文字母的小写组成的字符串  
^[A-Za-z0-9]+$　　//匹配由数字和26个英文字母组成的字符串  
^\w+$　　//匹配由数字、26个英文字母或者下划线组成的字符串  
^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$　　




[\\u0391-\\uFFE5]就匹配双字节字符 

hive 匹配中文 rlike '^[\\u4e00-\\u9fa5]+$';


[\\u0000-\\u007f\\u0391-\\uFFE5]

[\\u0391-\\uFFE5]匹配双字节字符（汉字+符号） 

[\\u4e00-\\u9fa5]注意只匹配汉字，不匹配双字节字符 


比如[\\u4e00-\\u9fa5]只匹配我们看到的汉字，不匹配全角状态下输入的符号！？　［］等等 

[\\u0391-\\uFFE5]就匹配双字节字符 

汉字就是双字节字符，全角符号也是双字节字符 


用正则表达式限制只能输入中文：onkeyup="value=value.replace(/[^\u4E00-\u9FA5]/g,'')" onbeforepaste="clipboardData.setData('text',clipboardData.getData('text').replace(/[^\u4E00-\u9FA5]/g,''))" 

1.用正则表达式限制只能输入全角字符： onkeyup="value=value.replace(/[^\uFF00-\uFFFF]/g,'')" onbeforepaste="clipboardData.setData('text',clipboardData.getData('text').replace(/[^\uFF00-\uFFFF]/g,''))" 

2.用正则表达式限制只能输入数字：onkeyup="value=value.replace(/[^\d]/g,'') "onbeforepaste="clipboardData.setData('text',clipboardData.getData('text').replace(/[^\d]/g,''))" 

3.用正则表达式限制只能输入数字和英文：onkeyup="value=value.replace(/[\W]/g,'') "onbeforepaste="clipboardData.setData('text',clipboardData.getData('text').replace(/[^\d]/g,''))" 

4.计算字符串的长度（一个双字节字符长度计2，ASCII字符计1） 

String.prototype.len=function(){return this.replace([^\x00-\xff]/g,"aa").length;} 

5.javascript中没有像vbscript那样的trim函数，我们就可以利用这个表达式来实现，如下： 

String.prototype.trim = function() 
{ 
return this.replace(/(^\s*)|(\s*$)/g, ""); 
} 

利用正则表达式分解和转换IP地址： 

6.下面是利用正则表达式匹配IP地址，并将IP地址转换成对应数值的Javascript程序： 

function IP2V(ip) 
{ 
re=/(\d+)\.(\d+)\.(\d+)\.(\d+)/g //匹配IP地址的正则表达式 
if(re.test(ip)) 
{ 
return RegExp.$1*Math.pow(255,3))+RegExp.$2*Math.pow(255,2))+RegExp.$3*255+RegExp.$4*1 
} 
else 
{ 
throw new Error("不是一个正确的IP地址!") 
} 
} 

不过上面的程序如果不用正则表达式，而直接用split函数来分解可能更简单，程序如下： 

var ip="10.100.20.168" 
ip=ip.split(".") 
alert("IP值是："+(ip[0]*255*255*255+ip[1]*255*255+ip[2]*255+ip[3]*1)) 
正则表达式用于字符串处理、表单验证等场合，实用高效。现将一些常用的表达式收集于此，以备不时之需。 